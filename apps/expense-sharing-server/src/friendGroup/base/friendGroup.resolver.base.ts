/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { FriendGroup } from "./FriendGroup";
import { FriendGroupCountArgs } from "./FriendGroupCountArgs";
import { FriendGroupFindManyArgs } from "./FriendGroupFindManyArgs";
import { FriendGroupFindUniqueArgs } from "./FriendGroupFindUniqueArgs";
import { CreateFriendGroupArgs } from "./CreateFriendGroupArgs";
import { UpdateFriendGroupArgs } from "./UpdateFriendGroupArgs";
import { DeleteFriendGroupArgs } from "./DeleteFriendGroupArgs";
import { UserFindManyArgs } from "../../user/base/UserFindManyArgs";
import { User } from "../../user/base/User";
import { FriendGroupService } from "../friendGroup.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => FriendGroup)
export class FriendGroupResolverBase {
  constructor(
    protected readonly service: FriendGroupService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "FriendGroup",
    action: "read",
    possession: "any",
  })
  async _friendGroupsMeta(
    @graphql.Args() args: FriendGroupCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [FriendGroup])
  @nestAccessControl.UseRoles({
    resource: "FriendGroup",
    action: "read",
    possession: "any",
  })
  async friendGroups(
    @graphql.Args() args: FriendGroupFindManyArgs
  ): Promise<FriendGroup[]> {
    return this.service.friendGroups(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => FriendGroup, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "FriendGroup",
    action: "read",
    possession: "own",
  })
  async friendGroup(
    @graphql.Args() args: FriendGroupFindUniqueArgs
  ): Promise<FriendGroup | null> {
    const result = await this.service.friendGroup(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => FriendGroup)
  @nestAccessControl.UseRoles({
    resource: "FriendGroup",
    action: "create",
    possession: "any",
  })
  async createFriendGroup(
    @graphql.Args() args: CreateFriendGroupArgs
  ): Promise<FriendGroup> {
    return await this.service.createFriendGroup({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => FriendGroup)
  @nestAccessControl.UseRoles({
    resource: "FriendGroup",
    action: "update",
    possession: "any",
  })
  async updateFriendGroup(
    @graphql.Args() args: UpdateFriendGroupArgs
  ): Promise<FriendGroup | null> {
    try {
      return await this.service.updateFriendGroup({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => FriendGroup)
  @nestAccessControl.UseRoles({
    resource: "FriendGroup",
    action: "delete",
    possession: "any",
  })
  async deleteFriendGroup(
    @graphql.Args() args: DeleteFriendGroupArgs
  ): Promise<FriendGroup | null> {
    try {
      return await this.service.deleteFriendGroup(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [User], { name: "users" })
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "read",
    possession: "any",
  })
  async findUsers(
    @graphql.Parent() parent: FriendGroup,
    @graphql.Args() args: UserFindManyArgs
  ): Promise<User[]> {
    const results = await this.service.findUsers(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }
}
