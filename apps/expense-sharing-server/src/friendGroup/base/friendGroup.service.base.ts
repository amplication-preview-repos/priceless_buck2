/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  FriendGroup as PrismaFriendGroup,
  User as PrismaUser,
} from "@prisma/client";

export class FriendGroupServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.FriendGroupCountArgs, "select">
  ): Promise<number> {
    return this.prisma.friendGroup.count(args);
  }

  async friendGroups<T extends Prisma.FriendGroupFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.FriendGroupFindManyArgs>
  ): Promise<PrismaFriendGroup[]> {
    return this.prisma.friendGroup.findMany<Prisma.FriendGroupFindManyArgs>(
      args
    );
  }
  async friendGroup<T extends Prisma.FriendGroupFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.FriendGroupFindUniqueArgs>
  ): Promise<PrismaFriendGroup | null> {
    return this.prisma.friendGroup.findUnique(args);
  }
  async createFriendGroup<T extends Prisma.FriendGroupCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.FriendGroupCreateArgs>
  ): Promise<PrismaFriendGroup> {
    return this.prisma.friendGroup.create<T>(args);
  }
  async updateFriendGroup<T extends Prisma.FriendGroupUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.FriendGroupUpdateArgs>
  ): Promise<PrismaFriendGroup> {
    return this.prisma.friendGroup.update<T>(args);
  }
  async deleteFriendGroup<T extends Prisma.FriendGroupDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.FriendGroupDeleteArgs>
  ): Promise<PrismaFriendGroup> {
    return this.prisma.friendGroup.delete(args);
  }

  async findUsers(
    parentId: string,
    args: Prisma.UserFindManyArgs
  ): Promise<PrismaUser[]> {
    return this.prisma.friendGroup
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .users(args);
  }
}
